// Date formatter

function formatDate(dateString) {
  const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', options);
}




/*
Template Name: Admin Template
Author: Wrappixel

File: js
*/
// ==============================================================
// Auto select left navbar
// ==============================================================

// Sidebar menu JavaScript codes

$(function () {
  "use strict";
  var url = window.location + "";
  var path = url.replace(
    window.location.protocol + "//" + window.location.host + "/",
    ""
  );
  var element = $("ul#sidebarnav a").filter(function () {
    return this.href === url || this.href === path; // || url.href.indexOf(this.href) === 0;
  });

  function findMatchingElement() {
    var currentUrl = window.location.href;
    var anchors = document.querySelectorAll("#sidebarnav a");
    for (var i = 0; i < anchors.length; i++) {
      if (anchors[i].href === currentUrl) {
        return anchors[i];
      }
    }

    return null; // Return null if no matching element is found
  }
  var elements = findMatchingElement();

  // Do something with the matching element
  if(elements){
    elements.classList.add("active");
  }

  document
    .querySelectorAll("ul#sidebarnav ul li a.active")
    .forEach(function (link) {
      link.closest("ul").classList.add("in");
      link.closest("ul").parentElement.classList.add("selected");
    });

  document.querySelectorAll("#sidebarnav li").forEach(function (li) {
    const isActive = li.classList.contains("selected");
    if (isActive) {
      const anchor = li.querySelector("a");
      if (anchor) {
        anchor.classList.add("active");
      }
    }
  });

  document.querySelectorAll("#sidebarnav a").forEach(function (link) {
    link.addEventListener("click", function (e) {
      const isActive = this.classList.contains("active");
      const parentUl = this.closest("ul");
      if (!isActive) {
        // hide any open menus and remove all other classes
        parentUl.querySelectorAll("ul").forEach(function (submenu) {
          submenu.classList.remove("in");
        });
        parentUl.querySelectorAll("a").forEach(function (navLink) {
          navLink.classList.remove("active");
        });

        // open our new menu and add the open class
        const submenu = this.nextElementSibling;
        if (submenu) {
          submenu.classList.add("in");
        }

        this.classList.add("active");
      } else {
        this.classList.remove("active");
        parentUl.classList.remove("active");
        const submenu = this.nextElementSibling;
        if (submenu) {
          submenu.classList.remove("in");
        }
      }
    });
  });

});









$(function () {
  // Admin Panel settings

  //****************************
  /* This is for the mini-sidebar if width is less then 1170*/
  //****************************
  var setsidebartype = function () {
    var width =
      window.innerWidth > 0 ? window.innerWidth : this.screen.width;
    if (width < 1199) {
      $("#main-wrapper").attr("data-sidebartype", "mini-sidebar");
      $("#main-wrapper").addClass("mini-sidebar");
    } else {
      $("#main-wrapper").attr("data-sidebartype", "full");
      $("#main-wrapper").removeClass("mini-sidebar");
    }
  };
  $(window).ready(setsidebartype);
  $(window).on("resize", setsidebartype);
  //****************************
  /* This is for sidebartoggler*/
  //****************************
  $(".sidebartoggler").on("click", function () {
    $("#main-wrapper").toggleClass("mini-sidebar");
    if ($("#main-wrapper").hasClass("mini-sidebar")) {
      $(".sidebartoggler").prop("checked", !0);
      $("#main-wrapper").attr("data-sidebartype", "mini-sidebar");
    } else {
      $(".sidebartoggler").prop("checked", !1);
      $("#main-wrapper").attr("data-sidebartype", "full");
    }
  });
  $(".sidebartoggler").on("click", function () {
    $("#main-wrapper").toggleClass("show-sidebar");
  });








  // General dashboard JS 

  $(function () {


  // -----------------------------------------------------------------------
  // sales overview
  // -----------------------------------------------------------------------

  var options_sales_overview = {
    series: [
      {
        name: "Ample Admin",
        data: [355, 390, 300, 350, 390, 180],
      },
      {
        name: "Pixel Admin",
        data: [280, 250, 325, 215, 250, 310],
      },
    ],
    chart: {
      type: "bar",
      height: 275,
      toolbar: {
        show: false,
      },
      foreColor: "#adb0bb",
      fontFamily: "inherit",
      sparkline: {
        enabled: false,
      },
    },
    grid: {
      show: false,
      borderColor: "transparent",
      padding: {
        left: 0,
        right: 0,
        bottom: 0,
      },
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: "25%",
        endingShape: "rounded",
        borderRadius: 5,
      },
    },
    colors: ["var(--bs-primary)", "var(--bs-secondary)"],
    dataLabels: {
      enabled: false,
    },
    yaxis: {
      show: true,
      min: 100,
      max: 400,
      tickAmount: 3,
    },
    stroke: {
      show: true,
      width: 5,
      lineCap: "butt",
      colors: ["transparent"],
    },
    xaxis: {
      type: "category",
      categories: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      axisBorder: {
        show: false,
      },
    },
    fill: {
      opacity: 1,
    },
    tooltip: {
      theme: "dark",
    },
    legend: {
      show: false,
    },
  };




});













// Blog page JavaScript code

$(document).ready(function () {
  fetchBlogs();

  // Preview selected new image
  $('#blogImage').on('change', function () {
    const file = this.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        $('#previewImage').attr('src', e.target.result).show();
      };
      reader.readAsDataURL(file);
    } else {
      $('#previewImage').hide();
    }
  });

  // Create post with image
  $('#blogForm').submit(function (e) {
      e.preventDefault();
      const formEl = this;
      const fd = new FormData(formEl);
      $.ajax({
          url: '/blog/createBlog',
          type: 'POST',
          data: fd,
          processData: false,
          contentType: false,
          success(res) {
              $(formEl)[0].reset();
              $('#previewImage').hide();
              fetchBlogs();
              Swal.fire({
                  icon: 'success',
                  title: 'Created!',
                  text: res.message || 'Blog post created successfully.'
              });
          },
          error(err) {
              console.error(err);
              Swal.fire({
                  icon: 'error',
                  title: 'Oops...',
                  text: err.responseJSON?.message || 'Error creating blog'
              });
          }
      });
  });

  // Fetch blogs (no change)
  function fetchBlogs() {
    $.get('/blog/getAllBlogs', function (data) {
      let html = '';

      if (data.length === 0) {
        html = `
          <div class="col-12">
            <div class="alert alert-info text-center" role="alert">
              No blogs available yet.
            </div>
          </div>
        `;
      } else {
        html = data.map(blog => {
          const shortMessage = blog.message.length > 50 ? blog.message.substring(0, 50) + '...' : blog.message;

          return `
            <div class="d-flex flex-row comment-row border-bottom p-3 gap-3">
              <div>
                ${blog.image
                  ? `<img src="${blog.image}" class="rounded-circle" width="50" height="50" />`
                  : `<i class="ti ti-camera fs-2"></i>`
                }
              </div>
              <div class="comment-text w-100">
                <h6 class="fw-medium">${blog.title}</h6>
                <p class="mb-1 fs-2 text-muted">${shortMessage}</p>
                <div class="comment-footer mt-2 d-flex justify-content-between align-items-center">
                  <div>
                    <a href="javascript:void(0)" class="ps-3 text-primary edit-btn" data-id="${blog.id}">
                      <i class="ti ti-edit fs-5"></i>
                    </a>
                    <a href="javascript:void(0)" class="ps-3 text-danger delete-btn" data-id="${blog.id}">
                      <i class="ti ti-trash fs-5"></i>
                    </a>
                  </div>
                  <span class="text-muted fw-normal fs-2">${new Date(blog.created_at).toDateString()}</span>
                </div>
              </div>
            </div>
          `;
        }).join('');
      }

      $('#blogList').html(html);
    });
  }



    // Open Edit Modal and preload data
    $(document).on('click', '.edit-btn', function () {
      const id = $(this).data('id');
      $.get(`/blog/getSingleBlog/${id}`, function (blog) {
        $('#editId').val(blog.id);
        $('#editTitle').val(blog.title);
        $('#editMessage').val(blog.message);
        if (blog.image) {
          $('#currentImage').attr('src', blog.image).show();
        } else {
          $('#currentImage').hide();
        }
        $('#previewEditImage').hide().attr('src', '');
        $('#editImage').val('');
        $('#editModal').modal('show');
      });
    });


    // Preview the selected image in the edit modal
    $('#editImage').on('change', function () {
      const file = this.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          $('#previewEditImage')
            .attr('src', e.target.result)
            .show();
        };
        reader.readAsDataURL(file);
      } else {
        $('#previewEditImage').hide();
      }
    });

    // Preview selected new image
    $('#editForm').submit(function (e) {
      e.preventDefault();
      const id = $('#editId').val();
      const fd = new FormData(this);
      $.ajax({
        url: `/blog/updateSingleBlog/${id}`,
        type: 'POST',
        data: fd,
        processData: false,
        contentType: false,
        success() {
          $('#editModal').modal('hide');
          fetchBlogs();
          Swal.fire({
              icon: 'success',
              title: 'Updated!',
              text: 'Blog post updated successfully.'
          });
        },
        error(err) {
          console.error(err);
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: err.responseJSON?.message || 'Error updating blog'
          });
        }
      });
    });

    // Delete blog
    $(document).on('click', '.delete-btn', function () {
      const id = $(this).data('id');
      Swal.fire({
          title: 'Are you sure?',
          text: "This will permanently delete the post.",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#1e4db7',
          confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          $.post(`/blog/deleteSingleBlog/${id}`, function () {
            fetchBlogs();
            Swal.fire(
              'Deleted!',
              'Your blog post has been deleted.',
              'success'
            );
          });
        }
      });
    });
  });











  // Profile page JavaScript codes
  if (window.location.pathname === '/dashboard' || window.location.pathname === '/dashboard/profile') {
    const role = $("#role").val();

    // Show additional fields for users
    if (role === "user") {
      $("#addressGroup").show();
      $("#carDetailsGroup").show();
    }

    $("#profileForm").on("submit", function (e) {
      e.preventDefault();

      const updatedData = {
        firstname: $("#firstname").val(),
        lastname: $("#lastname").val(),
        phone: $("#phone").val(),
        email: $("#email").val()
      };

      // Add user-only fields
      if (role === "User") {
        updatedData.address = $("#address").val();
        updatedData.carName = $("#carName").val();
        updatedData.carModel = $("#carModel").val();
        updatedData.plateNumber = $("#plateNumber").val();
      }
      console.log(updatedData)

      const endpoint = role === "Admin" ? "/admin/updateAdmin" : "/user/updateUser";

      $.ajax({
        url: endpoint,
        type: "PUT",
        contentType: "application/json",
        data: JSON.stringify(updatedData),
        success: function (response) {
          Swal.fire("Updated!", response?.message || "Profile updated successfully", "success");

          // Reflect the changes in the header
          $('#firstnameInHeader').text(updatedData.firstname);

          // Immediately reflect updates in display card
          $("#displayFirstname").text(updatedData.firstname);
          $("#displayLastname").text(updatedData.lastname);
          $("#displayPhone").text(updatedData.phone);
          $("#displayEmail").text(updatedData.email);
          $("#displayRole").text(role);

          if (role === "User") {
            $("#displayAddress").text(updatedData.address || "N/A");
            $("#displayCarName").text(updatedData.carName || "N/A");
            $("#displayCarModel").text(updatedData.carModel || "N/A");
            $("#displayPlateNumber").text(updatedData.plateNumber || "N/A");
          }
        },
        error: function (xhr) {
          Swal.fire("Error", xhr.responseJSON?.error || "Could not update profile", "error");
        }
      });
    });
  }








  // Subscription page JavaScript codes
  if ((window.location.pathname === '/dashboard/subscriptions') || (window.location.pathname === '/dashboard/transactions') || (window.location.pathname === '/dashboard/plans')) {
    if (window.location.pathname === '/dashboard/subscriptions') {
      // Auto billing toggle JavaScript codes
      document.getElementById("autoBillingToggle").addEventListener("change", function(e) {
        const isChecked = e.target.checked;

        if (isChecked) {
            // ✅ User wants to ENABLE auto billing
            Swal.fire({
                title: 'Enable Auto Billing?',
                text: "You will be charged automatically based on your current plan every month.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, enable it!',
                cancelButtonText: 'No, cancel',
                customClass: {
                    confirmButton: 'btn-prim',
                    cancelButton: 'btn-cancel'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    updateAutoBilling(true);  // Pass true explicitly
                } else {
                    e.target.checked = false; // revert toggle if cancelled
                }
            });

        } else {
            // ✅ User wants to DISABLE auto billing
            Swal.fire({
                title: 'Disable Auto Billing?',
                text: "You will need to renew manually before expiration.",
                icon: 'info',
                showCancelButton: true,
                confirmButtonText: 'Yes, disable',
                cancelButtonText: 'Keep it enabled',
                customClass: {
                    confirmButton: 'btn-prim',
                    cancelButton: 'btn-cancel'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    updateAutoBilling(false); // Pass false explicitly
                } else {
                    e.target.checked = true; // revert toggle if cancelled
                }
            });
        }
    });

    function updateAutoBilling(status) {
      const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      fetch('/user/auto-billing-toggle', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
              'X-CSRF-TOKEN': csrfToken
          },
          body: JSON.stringify({ status: status }) // ✅ Send explicit status
      }).then(res => res.json()).then(data => {
        if (data.success) {
            Swal.fire('Success', data.message, 'success');
            document.getElementById("autoBillingToggle").checked = data.autoBilling;
        } else {
            Swal.fire('Error', data.message, 'error');
            document.getElementById("autoBillingToggle").checked = false;
        }
      })
      .catch(() => {
          Swal.fire('Error', 'Server error. Please try again.', 'error');
          document.getElementById("autoBillingToggle").checked = false;
      });
    }
  }




    // Fetch subscription data when the page loads
    const fetchActivePlan = () => {
      $.ajax({
        url: '/user/fetchMyCurrentSubscription',
        method: 'GET',
        success: function(data) {
          $('#currentPlan').val(data.plan.charAt(0).toUpperCase() + data.plan.slice(1));
          const billingDate = new Date(data.nextBillingDate);
          $('#nextBilling').val(billingDate.toDateString());
        },
        error: function(err) {
          console.error(err);
          $('#currentPlan').val('None');
          $('#nextBilling').val('N/A');
        }
      });
    };
    fetchActivePlan();



    // Change Plan
    $('form#subscribe, form.direct-subscribe-form').on('submit', function (e) {
      e.preventDefault();

      const selectedPlan = $(this).find('.planSelect').val();

      if (!selectedPlan) {
        return Swal.fire({
          icon: 'warning',
          title: 'No Plan Selected',
          text: 'Please select a plan.',
        });
      }

      Swal.fire({
        title: 'Proceed to Paystack?',
        html: `
          You are about to be taken to Paystack to complete your payment.<br><br>
          <strong>Note:</strong> Any unexpired subscription will be lost.<br><br>
          Are you sure you want to continue?
        `,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, continue',
        cancelButtonText: 'No, cancel',
        customClass: {
          confirmButton: 'btn-prim',
          cancelButton: 'btn-cancel'
        },
      }).then((result) => {
        if (result.isConfirmed) {
          // 1. Call backend to get Paystack checkout URL
          $.ajax({
            url: '/user/initiatePayment',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ plan: selectedPlan }),
            success: function (response) {
              if (response.checkoutUrl) {
                // 2. Redirect user to Paystack to complete payment
                window.location.href = response.checkoutUrl;
              } else {
                Swal.fire({
                  icon: 'error',
                  title: 'Unexpected Error',
                  text: 'Unable to redirect to Paystack. Please try again.',
                });
              }
            },
            error: function (err) {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: err.responseJSON?.message || 'Failed to initiate payment.',
              });
              console.error(err);
            }
          });
        }
      });
    });


    // Cancel Subscription
    $('#cancelSubscriptionForm').on('submit', function (e) {
      e.preventDefault();

      Swal.fire({
        title: 'Cancel Subscription?',
        text: 'Are you sure you want to cancel your subscription?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No.',
        customClass: {
          confirmButton: 'btn-prim',
          cancelButton: 'btn-cancel'
        },
      }).then((result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: '/user/cancelSubscription',
            method: 'POST',
            success: function (response) {
              Swal.fire({
                icon: 'success',
                title: 'Subscription Cancelled',
                text: response.message,
              });
              fetchActivePlan();
              loadSubscriptionHistory();
            },
            error: function (err) {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Error cancelling subscription.',
              });
              console.error(err);
            }
          });
        }
      });
    });


    // Fetch transaction history
    let currentPage = 1;
    const limit = 5;
    let searchTerm = '';

    // Detect role from data attribute
    const role = $('#user-role').data('role');

    // Fetch subscription history with pagination and search
    function loadSubscriptionHistory(page = 1) {
      const encodedSearch = encodeURIComponent(searchTerm.trim());
      $.ajax({
        url: `/${role}/fetchSubscriptionHistory?page=${page}&limit=${limit}&search=${encodedSearch}`,
        method: 'GET',
        success: function (response) {
          const tbody = $('#subscriptionHistoryTable tbody');
          tbody.empty();

          // Adjust headers based on role at load
          if (role === 'admin') {
            $('.admin-only').removeClass('d-none');
            $('.user-only').addClass('d-none');
          } else {
            $('.admin-only').remove(); // Completely remove admin-only headers for users
          }

          if (response.data.length === 0) {
            tbody.append('<tr><td colspan="8">No history yet.</td></tr>');
          } else {
            response.data.forEach((sub, index) => {
              const isAdmin = role === 'admin';
              const userInfo = isAdmin
                ? `<td>${sub.firstname || ''} ${sub.lastname || ''}</td><td>${sub.email || ''}</td>`
                : `<td>${sub.firstname || ''}</td></td>`;

              tbody.append(`
                <tr>
                  <td>${(page - 1) * limit + index + 1}</td>
                  ${userInfo}
                  <td>${sub.plan.charAt(0).toUpperCase() + sub.plan.slice(1)}</td>
                  <td>${Number(sub.price).toLocaleString() || ''}</td>
                  <td>${sub.status}</td>
                  <td>${formatDate(sub.startDate)}</td>
                  <td>${formatDate(sub.nextBillingDate)}</td>
                </tr>
              `);
            });
          }

          renderPagination(response.currentPage, response.totalPages);
        },
        error: function (err) {
          console.error('Failed to load history', err);
        }
      });
    }

    // Handle search input (on type)
    $('#transactionSearch').on('input', function () {
      searchTerm = $(this).val();
      currentPage = 1;
      loadSubscriptionHistory(currentPage);
    });



    function renderPagination(current, total) {
      const container = $('#paginationControls');
      container.empty();

      if (total <= 1) return;

      const createButton = (pageNum, isActive = false) => {
        const btn = $(`<button class="btn btn-sm ${isActive ? 'btn-primary' : 'btn-outline-primary'} mx-1">${pageNum}</button>`);
        btn.on('click', () => loadSubscriptionHistory(pageNum));
        return btn;
      };

      const addEllipsis = () => {
        container.append('<span class="mx-2">...</span>');
      };

      // Always show: First, Prev
      if (current > 1) container.append(createButton(current - 1, false).text('« Prev'));
      container.append(createButton(1, current === 1));

      if (current > 3) addEllipsis();

      // Show current, previous, and next (middle pages)
      for (let i = current - 1; i <= current + 1; i++) {
        if (i > 1 && i < total) {
          container.append(createButton(i, i === current));
        }
      }

      if (current < total - 2) addEllipsis();

      // Always show: Last, Next
      if (total > 1) container.append(createButton(total, current === total));
      if (current < total) container.append(createButton(current + 1, false).text('Next »'));
    }
    loadSubscriptionHistory();

  }












  // Subscription proccessing page JavaScript codes
  if(window.location.pathname === '/dashboard/subscription-processing') {
    const reference = new URLSearchParams(window.location.search).get('reference');
    let retries = 0;

    async function checkSubscription() {
      try {
        const res = await fetch(`/user/check-subscription-status/${reference}`);
        const data = await res.json();

        if (data.status === 'active') {
          // ✅ Success
          document.getElementById('loadingSection').classList.add('d-none');
          document.getElementById('successSection').classList.remove('d-none');
          document.getElementById('nextBilling').value = `Next Billing: ${formatDate(data.nextBillingDate)}`;
          document.getElementById('planName').value = `Plan: ${data.plan.toUpperCase()}`;

        } else if (data.status === 'inactive') {
          // 🕓 Keep checking for a short while
          if (retries < 15) {
            retries++;
            setTimeout(checkSubscription, 3000);
          } else {
            // ❌ Timeout — treat as failure
            showFailure();
          }

        } else if (data.status === 'failed' || data.status === 'lost') {
          // ❌ Confirmed failure or cancellation
          showFailure();

        } else {
          // ⚠️ Unknown status — fallback
          console.error('Unknown subscription status:', data.status);
          showFailure();
        }
      } catch (err) {
        console.error('Error checking subscription status:', err);
        showFailure();
      }
    }

    function showFailure() {
      document.getElementById('loadingSection').classList.add('d-none');
      document.getElementById('failedSection').classList.remove('d-none');
    }

    checkSubscription();
  }











  // User wash history page JavaScript codes
  if (window.location.pathname === '/dashboard/wash-history') {
    // Codes For creating new wash history
    const role = $('#user-role').data('role');
    if (role === 'admin') {
      $('#addWashWrapper').removeClass('d-none');
    }

    $('#addWashForm').submit(function (e) {
      e.preventDefault();
      const formData = {};

      $('#addWashForm').serializeArray().forEach(({ name, value }) => {
        formData[name] = value.trim();
      });

      $.ajax({
        type: 'POST',
        url: '/admin/addWashHistory', // Adjust your endpoint
        data: formData,
        success: function (res) {
          $('#addWashModal').modal('hide');
          Swal.fire('Success', 'Wash record added', 'success');
          $('#addWashForm')[0].reset();
          // Optionally refresh table:
          fetchWashHistory(); 
        },
        error: function (err) {
          Swal.fire('Error', err.responseJSON?.message || 'Failed to add record', 'error');
        }
      });
    });




    
    // Codes to fetch wash history
    function truncateNotes(text, maxLength = 40) {
      if (!text) return '-';
      return text.length > maxLength ? text.slice(0, maxLength) + '...' : text;
    }

    let washSearchTerm = '';
    $('#washSearchInput').on('keyup', function () {
      washSearchTerm = $(this).val().trim();
      fetchWashHistory(1); // reset to first page on search
    });


    const user = $('#user-role').data('role');

    function fetchWashHistory(page = 1, limit = 5) {
      const URI = user === 'admin' ? `/admin/getWashHistory?page=${page}&limit=${limit}&search=${encodeURIComponent(washSearchTerm)}` : `/user/getUserWashHistory?page=${page}&limit=${limit}&search=${encodeURIComponent(washSearchTerm)}`;
      $.ajax({
        url: URI,
        type: 'GET',
        success: function (res) {
          const { data, currentPage, totalPages } = res;
          const tbody = $('#washHistoryTable tbody');
          tbody.empty();

          if (!data || data.length === 0) {
            tbody.append('<tr><td colspan="5" class="text-center">No wash history available.</td></tr>');
            return;
          }

          data.forEach((wash, index) => {
            const truncatedNotes = truncateNotes(wash.notes);

            const isAdmin = user === 'admin'; // Check if current user is admin

            const actionButtons = isAdmin
              ? `
                <td class="equal-width-cell2">
                  <button class="btn btn-sm btn-outline-warning me-1 edit-btn2" data-id="${wash.id}">
                    <i class="ti ti-edit"></i>
                  </button>
                  <button class="btn btn-sm btn-outline-danger delete-btn2" data-id="${wash.id}">
                    <i class="ti ti-trash"></i>
                  </button>
                </td>
              `
              : ''; // Empty string if not admin

            const row = $(`
              <tr style="cursor: pointer;" class="wash-history-row" data-index="${index}">
                <td>${(page - 1) * limit + index + 1}</td>
                <td class="equal-width-cell2" title="${wash.firstname || 'N/A'}">${wash.firstname || 'N/A'}</td>
                <td class="equal-width-cell2" title="${wash.email || 'N/A'}">${wash.email || 'N/A'}</td>
                <td class="equal-width-cell2" title="${wash.carName || 'N/A'}">${wash.carName || 'N/A'}</td>
                <td class="equal-width-cell2" title="${wash.carModel || 'N/A'}">${wash.carModel || 'N/A'}</td>
                <td class="equal-width-cell2" title="${wash.washedBy || 'N/A'}">${wash.washedBy || 'N/A'}</td>
                <td class="equal-width-cell2" title="${wash.notes || 'N/A'}">${truncatedNotes}</td>
                <td class="equal-width-cell2" title="${formatDate(wash.created_at)}">${formatDate(wash.created_at)}</td>
                ${actionButtons}
              </tr>
            `);

            // Store full data in DOM for popup
            row.data('wash', wash);
            tbody.append(row);
          });



          // Click handler for each row to show full info
          $('.wash-history-row').on('click', function (e) {
            // ✅ Prevent row click if the target or its parent is a button or icon inside a button
            if ($(e.target).closest('button').length > 0 || $(e.target).is('i')) {
              return; // Don't trigger Swal
            }
            
            const wash = $(this).data('wash');

            Swal.fire({
              title: 'Wash Details',
              html: `
                <div style="text-align: left">
                  <p><strong>Firstname:</strong> ${wash.firstname || 'N/A'}</p>
                  <p><strong>Email:</strong> ${wash.email || 'N/A'}</p>
                  <p><strong>Car Name:</strong> ${wash.carName || 'N/A'}</p>
                  <p><strong>Car Model:</strong> ${wash.carModel || 'N/A'}</p>
                  <p><strong>Washed By:</strong> ${wash.washedBy || 'N/A'}</p>
                  <p><strong>Notes:</strong><br>${wash.notes || '-'}</p>
                  <p><strong>Date:</strong> ${formatDate(wash.created_at)}</p>
                </div>
              `,
              icon: 'info',
              confirmButtonText: 'Close',
              confirmButtonColor: '#d33',
            });
          });

          // Pagination
          function renderPagination(containerSelector, currentPage, totalPages, onPageClick) {
            const container = $(containerSelector);
            container.empty();

            if (totalPages <= 1) return;

            const createButton = (pageNum, isActive = false, label = null) => {
              const btn = $(`<button class="btn btn-sm ${isActive ? 'btn-primary' : 'btn-outline-primary'} mx-1">${label || pageNum}</button>`);
              btn.on('click', () => onPageClick(pageNum));
              return btn;
            };

            const addEllipsis = () => container.append('<span class="mx-2">...</span>');

            if (currentPage > 1) container.append(createButton(currentPage - 1, false, '« Prev'));
            container.append(createButton(1, currentPage === 1));

            if (currentPage > 3) addEllipsis();

            for (let i = currentPage - 1; i <= currentPage + 1; i++) {
              if (i > 1 && i < totalPages) {
                container.append(createButton(i, i === currentPage));
              }
            }

            if (currentPage < totalPages - 2) addEllipsis();

            if (totalPages > 1) container.append(createButton(totalPages, currentPage === totalPages));
            if (currentPage < totalPages) container.append(createButton(currentPage + 1, false, 'Next »'));
          }

          // ⬇️ Pagination rendering
          renderPagination('#washPaginationControls', currentPage, totalPages, function (newPage) {
            fetchWashHistory(newPage, limit);
          });
        },
        error: function (err) {
          console.error(err);
          $('#washHistoryTable tbody').html('<tr><td colspan="5" class="text-danger text-center">Error loading history</td></tr>');
        }
      });
    }
    fetchWashHistory();





    // Codes for editing and updating wash history
    $(document).on('click', '.edit-btn2', function (e) {
      e.stopPropagation(); // Prevent row click

      const id = $(this).data('id');
      alert(id)
      const rowData = $(this).closest('tr').data('wash');

      if (!rowData) return; // Safety check

      // Populate modal fields
      $('#editWashModal input[name="washId"]').val(id);
      $('#editWashModal input[name="firstname"]').val(rowData.firstname || '');
      $('#editWashModal input[name="email"]').val(rowData.email || '');
      $('#editWashModal input[name="carName"]').val(rowData.carName || '');
      $('#editWashModal input[name="carModel"]').val(rowData.carModel || '');
      $('#editWashModal input[name="washedBy"]').val(rowData.washedBy || rowData.performedBy || '');
      $('#editWashModal textarea[name="notes"]').val(rowData.notes || '');

      // Show modal
      $('#editWashModal').modal('show');
    });


    $('#editWashForm').on('submit', function (e) {
      e.preventDefault();
      const formData = $(this).serialize();

      $.ajax({
        url: `/admin/updateWashHistory`,
        type: 'POST',
        data: formData,
        success: (res) => {
          $('#editWashModal').modal('hide');
          fetchWashHistory(); // Refresh
          Swal.fire('Updated!', res.message || 'Wash record updated.', 'success');
        },
        error: (xhr) => {
          Swal.fire('Error!', xhr.responseJSON?.error || 'Update failed.', 'error');
        }
      });
    });






    // Codes for deleting wash history
    $('#washHistoryTable').on('click', '.delete-btn2', function () {
      const id = $(this).data('id');

      Swal.fire({
        title: 'Are you sure?',
        text: 'This record will be permanently deleted.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#1e4db7',
        confirmButtonText: 'Yes, delete it!'
      }).then(result => {
        if (result.isConfirmed) {
          $.ajax({
            url: `/admin/deleteWashHistory/${id}`,
            type: 'DELETE',
            success: () => {
              Swal.fire('Deleted!', 'Wash record deleted.', 'success');
              fetchWashHistory(); // Refresh
            },
            error: () => {
              Swal.fire('Error!', 'Something went wrong.', 'error');
            }
          });
        }
      });
    });

  }








  // Get all Users page JavaScript codes
  if (window.location.pathname === '/dashboard/users') {
    const role = $('#user-role').data('role');
    if (role !== 'admin') return;

    const limit = 5;

    function loadUsers(page = 1) {
      const search = $('#searchInput').val().trim();
      const status = $('#statusFilter').val();

      fetch(`/admin/getAllUsers?page=${page}&limit=${limit}&search=${encodeURIComponent(search)}&status=${status}`)
        .then(res => res.json())
        .then(response => {
          const tbody = $('#userTable tbody');
          tbody.empty();

        if (response.data.length === 0) {
          tbody.append('<tr><td colspan="8">No users found.</td></tr>');
        } else {
          response.data.forEach((user, index) => {
            tbody.append(`
              <tr>
                <td>${(page - 1) * limit + index + 1}</td>
                <td><span class="equal-width-cell" title="${user.firstname} ${user.lastname}">${user.firstname} ${user.lastname}</span></td>
                <td><span class="equal-width-cell" title="${user.email}">${user.email}</span></td>
                <td><span class="equal-width-cell" title="${user.phone}">${user.phone}</span></td>
                <td><span class="equal-width-cell" title="${user.carName || '-'} ${user.carModel || ''}">${user.carName || '-'} ${user.carModel || ''}</span></td>
                <td><span class="equal-width-cell" title="${user.plateNumber || '-'}">${user.plateNumber || '-'}</span></td>
                <td>
                  <span class="badge ${user.status === 'active' ? 'bg-success' : 'bg-danger'}">
                    ${user.status?.toUpperCase()}
                  </span>
                </td>
                <td title="${formatDate(user.created_at) || ''}">${formatDate(user.created_at) || ''}</td>
              </tr>
            `);
          });
        }


          renderUserPagination(response.currentPage, response.totalPages);
      })
      .catch(err => {
        console.error('Error loading users:', err);
        Swal.fire('Error', 'Failed to load users', 'error');
      });
    }

    // Initial load
    loadUsers();

    // 🔍 Search & Filter Events
    $('#searchInput').on('input', () => loadUsers(1));
    $('#statusFilter').on('change', () => loadUsers(1));
    $('#resetFilters').on('click', () => {
      $('#searchInput').val('');
      $('#statusFilter').val('');
      loadUsers(1);
    });


    function renderUserPagination(current, total) {
      const container = $('#userPaginationControls');
      container.empty();

      if (total <= 1) return;

      const createButton = (pageNum, isActive = false) => {
        const btn = $(`<button class="btn btn-sm ${isActive ? 'btn-primary' : 'btn-outline-primary'} mx-1">${pageNum}</button>`);
        btn.on('click', () => loadUsers(pageNum));
        return btn;
      };

      const addEllipsis = () => {
        container.append('<span class="mx-2">...</span>');
      };

      if (current > 1) container.append(createButton(current - 1).text('« Prev'));
      container.append(createButton(1, current === 1));

      if (current > 3) addEllipsis();

      for (let i = current - 1; i <= current + 1; i++) {
        if (i > 1 && i < total) {
          container.append(createButton(i, i === current));
        }
      }

      if (current < total - 2) addEllipsis();

      if (total > 1) container.append(createButton(total, current === total));
      if (current < total) container.append(createButton(current + 1).text('Next »'));
    }
  }






















  // Change password page Javascript codes 
  if((window.location.pathname === '/dashboard/change-password') || (window.location.pathname || '/dashboard/login') || (window.location.pathname || '/dashboard/register')) {
    $('.toggle-password').on('click', function() {
      const input = $($(this).data('target'));
      const icon = $(this).find('i');

      if (input.attr('type') === 'password') {
        input.attr('type', 'text');
        icon.removeClass('ti-eye').addClass('ti-eye-off');
      } else {
        input.attr('type', 'password');
        icon.removeClass('ti-eye-off').addClass('ti-eye');
      }
    });

    $('form#changePasswordForm').on('submit', function(e) {
      e.preventDefault();
      const currentPass = $('#currentPassword').val().trim();
      const newPass = $('#newPassword').val().trim();
      if (!newPass || !currentPass) return;

      // Get user role
      const userRole = $('#user-role').val();

      $.ajax({
        url: `/${userRole}/changePassword`,
        method: 'PATCH',
        contentType: 'application/json',
        data: JSON.stringify({ currentPassword: currentPass, newPassword: newPass }),
        beforeSend() {
          Swal.fire({
            title: 'Updating…',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
          });
        },
        success(res) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: res.message || 'Password changed successfully!'
          });
          $('#newPassword').val('');
        },
        error(xhr) {
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: xhr.responseJSON?.message || 'An error occurred. Please try again.'
          });
        }
      });
    });
  }













  // Logout JavaScript codes
  $('.logout-btn').on('click', function (e) {
    e.preventDefault();

    Swal.fire({
      title: 'Are you sure?',
      text: "You will be logged out of your account.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, logout',
      cancelButtonText: 'No',
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          type: 'GET',
          url: '/logout',
          success: function (response) {
            Swal.fire({
              icon: 'success',
              title: 'Logged out',
              text: response.message,
              timer: 1000,
              showConfirmButton: false
            }).then(() => {
              window.location.href = '/login';
            });
          },
          error: function (xhr) {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: xhr.responseJSON?.message || 'An error occured while logging out.'
            });
          }
        });
      }
    });
  });














  // Register Page JavaScript codes
  if (window.location.pathname === '/register') {
    // Toggle user-specific fields
    $('#userCheck').change(function () {
      if (this.checked) {
        $('#userFields').slideDown();
        $('#adminCheck').prop('checked', false);
      } else {
        $('#userFields').slideUp();
      }
    });

    $('#adminCheck').change(function () {
      if (this.checked) {
        $('#userFields').slideUp();
        $('#userCheck').prop('checked', false);
      }
    });

    // Checking if passwords match
    function checkPasswordsMatch() {
      const password = $('#password').val();
      const confirmPassword = $('#confirmPassword').val();

      if (password && confirmPassword) {
        if (password === confirmPassword) {
          $('#passwordMatchMsg')
            .text('✅ Passwords match')
            .css('color', 'green');
        } else {
          $('#passwordMatchMsg')
            .text('❌ Passwords do not match')
            .css('color', 'red');
        }
      } else {
        $('#passwordMatchMsg').text('');
      }
    }

    $('#password, #confirmPassword').on('keyup', checkPasswordsMatch);


    // Registration form submitted
    $('#registerForm').submit(function (e) {
      e.preventDefault();

      const isAdmin = $('#adminCheck').is(':checked');
      const isUser = $('#userCheck').is(':checked');

      // 🛑 Role validation
      if (!isAdmin && !isUser) {
        Swal.fire({
          icon: 'warning',
          title: 'Role Required',
          text: 'Please select at least one role (Admin or User)'
        });
        return;
      }

      const formData = {
        firstname: $('#firstname').val().trim(),
        lastname: $('#lastname').val().trim(),
        phone: $('#phone').val().trim(),
        email: $('#email').val().trim(),
        password: $('#password').val(),
        confirmPassword: $('#confirmPassword').val()
      };

      if (isUser) {
        formData.address = $('#address').val().trim();
        formData.carName = $('input[name="carName"]').val().trim();
        formData.carModel = $('input[name="carModel"]').val().trim();
        formData.plateNumber = $('input[name="plateNumber"]').val().trim();
      }

      // 🛑 Validate empty fields
      for (const [key, value] of Object.entries(formData)) {
        if (!value) {
          Swal.fire({
            icon: 'warning',
            title: 'Missing Field',
            text: `Please enter your ${key}`
          });
          return; // Stop AJAX request if any field is empty
        }
      }

      const endpoint = isAdmin ? '/admin/register' : '/user/register';

      $.ajax({
        type: 'POST',
        url: endpoint,
        data: formData,
        success: function (response) {
          Swal.fire({
            icon: 'success',
            title: 'Registered!',
            text: response.message || 'Registration successful!',
            timer: 1500,
            showConfirmButton: false
          }).then(() => {
            window.location.href = '/login';
          });
        },
        error: function (xhr) {
          const errorMessage = xhr.responseJSON?.message || 'Registration failed';
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: errorMessage
          });
        }
      });
    });
  }
  












  // Login page JavaScript codes
  if(window.location.pathname === '/login') {
    $('#loginForm').submit(function (e) {
      e.preventDefault();

      const email = $('#email').val();
      const password = $('#password').val();

      $.ajax({
        type: 'POST',
        url: '/login', // shared route
        data: { email, password },
        success: function (response) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: response.message || 'Login successful!',
            timer: 1000,
            showConfirmButton: false
          }).then(() => {
            window.location.href = '/dashboard';
          });
        },
        error: function (xhr) {
          const errorMessage = xhr.responseJSON?.message || 'Invalid credentials';
          Swal.fire({
            icon: 'error',
            title: 'Login Failed',
            text: errorMessage
          });
        }
      });

    });
  }


  $.ajaxSetup({
    headers: {
      'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
  });
});
